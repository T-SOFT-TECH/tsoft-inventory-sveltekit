// See https://svelte.dev/docs/kit/types#app.d.ts
// for information about these interfaces

import type { SupabaseClient, Session, User as SupabaseAuthUser } from '@supabase/supabase-js';
import type { Database } from '$lib/database.types'; // Assuming this will be generated by `supabase gen types typescript`

// Define the Profile interface based on your 'profiles' table structure
interface Profile {
  username: string | null;
  full_name: string | null;
  avatar_url: string | null;
  // Add other profile fields if you select them, e.g., bio, website, etc.
}

// Extend the SupabaseUser type to include the profile information
// This new User type will be used in App.Locals
interface User extends SupabaseAuthUser {
  profile?: Profile | null; // Profile is optional and can be null
}

declare global {
  namespace App {
    interface Error {
      message: string;    // Ensure error objects have a message property
      code?: string;       // Optional: for error codes
      details?: string;    // Optional: for more details
      id?: string;         // Optional: for a unique error ID
    }
    interface Locals {
      supabase: SupabaseClient<Database>; // Typed Supabase client
      getSession(): Promise<Session | null>;
      session: Session | null;
      user: User | null; // Use our extended User type which includes profile
    }
    interface PageData {
      session?: Session | null; // Make session available in page data if needed globally
      user?: User | null;       // Optionally pass the augmented user to all pages
      // You can add other global page data properties here
    }
    // interface PageState {}
    // interface Platform {}
  }
}

export {};
